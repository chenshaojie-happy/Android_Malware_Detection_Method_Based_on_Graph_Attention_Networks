# coding=utf-8
import os
from Decompilation.apktool import apktool
from Decompilation.jar2java import jar2java
from static import get_apk_path, get_lsi_config, get_xgboost_config, get_cscg_config, get_graph_config
from static import total_process_multi_core, total_process_single_core, java_src_tmp_path, ts_max, min_k_tmp_file
from lexical_analysis.extract_token import extract_token
from Permission.permissionExtract import extractPermission
from dataset_construct.create_filelist import create_filelist

program_root = os.getcwd()
# 添加apktool的环境变量
os.environ["PATH"] = program_root + '/tools/apktool/' + ":" + os.environ["PATH"]
# 添加jadx的环境变量
os.environ["PATH"] = program_root + '/tools/jadx/build/jadx/bin/' + ":" + os.environ["PATH"]


# 对原始APK文件进行预处理，包括反编译等,在python3.6下运行
def preproces(dataset):
    apk_path, manifest_path, dex_path, java_path, _3rd_path, permission_path, token_path, filelist_train, filelist_test, filelist_train_filter, filelist_test_filter = get_apk_path(dataset)

    # 2.使用apktool获取每个文件的Androidmanifest.xml和class.dex,在python2.7下运行
    apktool(apk_path, manifest_path, dex_path, total_process_multi_core)

    # 3.使用jadx对每个class.dex进行反编译，并将反编译的全部java文件打包生成.zip的压缩包,在python3.6下运行
    jar2java(dex_path, java_path, java_src_tmp_path, program_root, total_process_multi_core)

    # 4.对每个反编译得到的java文件进行token提取,在python3.6下运行
    extract_token(dataset, _3rd_path, java_path, manifest_path, token_path, total_process_single_core)

    # 5.对每个manifest文件提取权限特征,在python3.6下运行
    extractPermission(manifest_path, permission_path)

    # 6.生成记录每个数据集下全部有效数据的文件filelist.txt,在python3.6下运行
    create_filelist(filelist_train, filelist_train_filter, _3rd_path, manifest_path, java_path)

    # 7.生成记录每个数据集下全部有效数据的文件filelist.txt,在python3.6下运行
    create_filelist(filelist_test, filelist_test_filter, _3rd_path, manifest_path, java_path)


if __name__ == '__main__':
    dataset = 'AMD_AndroZoo_demo'
    preproces(dataset)


