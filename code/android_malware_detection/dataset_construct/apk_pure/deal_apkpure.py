# coding=utf-8
import os
import hashlib
import csv
import shutil

# 计算文件的MD5值，用于重命名和VT查询
def get_file_md5(filepath):
    m = hashlib.md5()
    with open(filepath, 'rb') as fobj:
        while True:
            data = fobj.read(4096)
            if not data:
                break
            m.update(data)

    return m.hexdigest()


# 用来计算apk类别的MD5值，用于重命名
def get_string_md5(string):
    md5_str = hashlib.md5(string.encode('utf8'))
    return md5_str.hexdigest()


# 计算文件的md5值，并将文件重命名，返回重命名后文件与源文件名的对应关系，以及MD5值
def get_file_details(filepath, type):
    details = {}
    parts = filepath.split('/')
    if len(parts) < 2:
        return details
    details['md5_file'] = get_file_md5(filepath)
    details['md5_type'] = get_string_md5(type)[:10]
    details['old_name'] = parts[-2] + '/' + parts[-1]
    details['type'] = parts[-2]
    details['new_name'] = details['md5_file'] + '.' + details['md5_type'] + '.apk'
    return details

# root最后要包含'/'
def get_all_apk_details(root):
    count = 0
    details = []
    folders = os.listdir(root)
    for folder in folders:
        files = os.listdir(root + folder)
        for file in files:
            if not file.endswith('.apk'):
                continue
            count += 1
            filepath = root + folder + '/' + file
            detail = get_file_details(filepath, folder)
            details.append(detail)
            print('Already compute MD5 count: ' + str(count) + ', recent file detail: ' + str(detail))
            # print(detail)
            # break
        # break
    return details


# 将文件详细信息转换为csv格式
def transform_csv(details, csv_file):
    headers = ['new_name', 'type', 'md5_file', 'old_name', 'md5_type']

    fo = open(csv_file, 'w',encoding='utf-8')
    fo.write(headers[0] + ',' + headers[1] + ',' + headers[2] + ',' + headers[3] + ',' + headers[4] + '\n')
    for detail in details:
        fo.write('"' + detail['new_name'] + '","' + detail['type'] + '","' + detail['md5_file'] + '","' + detail['old_name'] + '","' + detail['md5_type'] + '"\n')
    fo.close()


# 将文件移动到新路径
def move_file(details, root, dataset_root):
    for detail in details:
        old_path = root + detail['old_name']
        new_path = dataset_root + detail['new_name']
        shutil.move(old_path, new_path)


# 将文件移动到旧路径
def move_file_2old(csv_file, root, dataset_root):
    fi = open(csv_file, encoding='utf-8')

    f_csv = csv.reader(fi)
    number = 0
    for row in f_csv:
        # 去掉csv的表头
        number += 1
        if number == 1:
            continue
        print(row)
        old_name = row[3]
        new_name = row[0]
        old_path = root + old_name
        new_path = dataset_root + new_name
        shutil.move(new_path, old_path)


# 将文件移动到旧路径
def move_file_2new(csv_file, root, dataset_root):
    fi = open(csv_file, encoding='utf-8')

    f_csv = csv.reader(fi)
    number = 0
    for row in f_csv:
        # 去掉csv的表头
        number += 1
        if number == 1:
            continue
        print(row)
        old_name = row[3]
        new_name = row[0]
        old_path = root + old_name
        new_path = dataset_root + new_name
        shutil.move(old_path, new_path)


if __name__ == '__main__':
    root = '/data2/android_malware_detection/compare/download/APK_Downloader-master/apk/'
    csv_file = '/data2/android_malware_detection/compare/download/APK_Downloader-master/apk_details.csv'
    dataset_root = '/data2/android_malware_detection/dataset/apkpure/white/'
    # details = get_all_apk_details(root)
    # transform_csv(details, csv_file)
    # move_file(details, root, dataset_root)
    # # print(details)

    # move_file_2old(csv_file, root, dataset_root)
    move_file_2new(csv_file, root, dataset_root)

# if __name__ == '__main__':
#     root = 'I:/android_malware_detection/compare/download/APK_Downloader-master/apk/'
#     size_dict = {}
#     count = 0
#     details = []
#     folders = os.listdir(root)
#     for folder in folders:
#         files = os.listdir(root + folder)
#         for file in files:
#             if not file.endswith('.apk'):
#                 continue
#
#             shutil.move(root + folder + '/' + file, root + 'bk/' + file)

            # size = os.path.getsize(root + folder + '/' + file)
            # if size not in size_dict:
            #     size_dict[size] = []
            # size_dict[size].append(folder + '/' + file)
#
#     for size in size_dict:
#         if len(size_dict[size])>1:
#             print('-------------------------')
#             for file in size_dict[size]:
#                 filepath = root + file
#                 md5 = get_file_md5(filepath)
#                 print(file + ', ' + md5)

