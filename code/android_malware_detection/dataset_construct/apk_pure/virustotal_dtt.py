# get_rank_from_virustotal

from multiprocessing import Pool
import multiprocessing
import os
import urllib
import urllib2
import json
import time
    

def scanURL(urls,apikey):
    #print urls
    url = 'https://www.virustotal.com/vtapi/v2/url/report'
    parameters = {"resource":urls,"apikey":apikey,"scan":1}
    data = urllib.urlencode(parameters)
    try:
        req = urllib2.Request(url, data)
        response = urllib2.urlopen(req)
        js = json.loads(response.read())
        return js
    except:
        return ""


def virustotal_process(domain_list,apikey,id, tmp_path):
    result_file = open(tmp_path+"/"+str(id)+".csv","w+")
    black_file = open(tmp_path+"/black_"+str(id)+".csv","w+")
    
    for line in domain_list:
        urls = line.strip()
        #positives,total = scanURL(urls,apikey)
        #result_file.write(urls+","+str(positives)+","+str(total)+"\n")
        js = scanURL(urls,apikey)
        if js != "":
            code = js.get("response_code")
            #print code
            result_file.write(urls+",")
            if code == 1:
                #result.append(js.get("positives"))
                #print js.get("positives"),js.get("total")
                positives = str(js.get("positives"))
                total = str(js.get("total"))
                if positives == "None":
                    positives = "-1"
                if total == "None":
                    total = "-1"
                result_file.write("1,"+positives+","+total+"\n")
                if js.get("positives") >= 2:
                    black_file.write(urls+"\n")
            else:
                #result.append(-1)
                result_file.write(str(code)+",-1,-1\n")
        time.sleep(20)
    result_file.close()
    black_file.clsoe()
    ok_file = open(tmp_path+"/"+str(id)+".ok","w+")
    ok_file.close()

def predict(source_path,result_path,black_path, API_keys, tmp_path):
    # API_keys = ["404ccfb982ce767816e07ef779a9ba160493ac1b783d3da5eb959979a6cd4a63","017ad01f354ae9f707b47d4658341cc683167ce9b20d80170ed20500016c05d0"]
    os.system("rm "+tmp_path+"/*")
    pool_num = len(API_keys)
    pool = multiprocessing.Pool(processes=pool_num)
    
    source_file = open(source_path,"r")
    lines = source_file.readlines()
    source_file.close()
    block = len(lines)/pool_num
    
    for i in range(pool_num): 
        if i < pool_num - 1:
            domain_list = lines[i*block:(i+1)*block]
        else:
            domain_list = lines[i*block:]
        print("process "+str(i)+" start")
        print(len(domain_list))
        pool.apply_async(virustotal_process, (domain_list, API_keys[i], i, tmp_path))
    pool.close()
    pool.join()
    
    result_file = open(result_path,"w+")  
    black_file = open(black_path,"w+") 
    while(1):
        file_list = os.listdir(tmp_path)
        if len(file_list) == pool_num*3:
            for i in range(pool_num):
                source_path = tmp_path+"/"+str(i)+".csv"
                source_file = open(source_path,"r")
                lines = source_file.readlines()
                for line in lines:
                    result_file.write(line)
                source_file.close()
				
                black_source_path = tmp_path+"/black_"+str(i)+".csv"
                black_source_file = open(black_source_path,"r")
                lines = black_source_file.readlines()
                for line in lines:
                    black_file.write(line)
                black_source_file.close()				
            os.system("rm "+tmp_path+"/*")
            result_file.close()
            black_file.close()
            break
        time.sleep(20)

if __name__ == '__main__':
    source_path = "../test.txt"
    result_path = "result.csv"
    black_path = "black.csv"
    API_keys = ["404ccfb982ce767816e07ef779a9ba160493ac1b783d3da5eb959979a6cd4a63","017ad01f354ae9f707b47d4658341cc683167ce9b20d80170ed20500016c05d0"]
    tmp_path = "tmp"
    predict(source_path, result_path, black_path, API_keys, tmp_path)